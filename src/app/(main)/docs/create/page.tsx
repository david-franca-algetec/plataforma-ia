"use client";

import { TinyEditor } from "@/components/Editor";
import { SectionComponent } from "@/components/Section";
import { Accordion, AccordionTab } from "primereact/accordion";
import { Button } from "primereact/button";
import { Dialog } from "primereact/dialog";
import { InputText } from "primereact/inputtext";
import React, { Key, useState } from "react";

interface Section {
  key: string;
  title: string;
  text?: string;
  sections?: Section[];
}

const nodes: Section[] = [
  {
    key: "1",
    title: "Diagnóstico e Teorização",
    sections: [
      {
        key: "1.1",
        title: "Identificação das partes interessadas e parceiros",
        text: "<p>S&atilde;o partes interessadas do projeto de extens&atilde;o da mat&eacute;ria de Programa&ccedil;&atilde;o Orientada a Objeto em Java, ministrada pelo professor Almir Rog&eacute;rio de Macedo, no Centro Universit&aacute;rio Est&aacute;cio de Bras&iacute;lia. Dos alunos s&atilde;o:</p><ul><li>Breno Esser: &nbsp;21 anos, estudante de Ci&ecirc;ncia da Computa&ccedil;&atilde;o.</li><li>Davi Mar&ccedil;al Silva Ara&uacute;jo: 19 anos, estudante de Ci&ecirc;ncia da Computa&ccedil;&atilde;o</li><li>Gustavo &Ecirc;rades: 20 anos, estudante de An&aacute;lise e Desenvolvimento de Sistemas</li><li>Samatha Santos Duarte: 20 anos, estudante de An&aacute;lise e Desenvolvimento de Sistemas.</li></ul><p>O cliente consiste no coordenador do curso de odontologia do Centro Universit&aacute;rio Est&aacute;cio de Bras&iacute;lia, Rafael Rodrigues. O cliente concordou com o in&iacute;cio do projeto e apresentou a ideia de forma breve na semana do dia 26/09/2023 ap&oacute;s encontro com os alunos Gustavo &Ecirc;rades, Gustavo Paulino e Samantha Santos na sala da coordenadora dos cursos de tecnologia na mesma institui&ccedil;&atilde;o, Josyane Lannes. Foi marcada uma reuni&atilde;o para a semana seguinte para o levantamento efetivo dos requisitos do sistema a ser desenvolvido.</p>",
      },
      {
        key: "1.2",
        title: "Problemática e/ou problemas identificados",
        text: "<p>Foi identificado que o Cliente, Rafael Rodrigues, precisava de um sistema de prontu&aacute;rio odontol&oacute;gico eletr&ocirc;nico que facilitasse o registros de clientes da odontologia, o diagn&oacute;stico por parte dos estudantes do curso e diminu&iacute;sse a quantidade de papel usada nos prontu&aacute;rios e espa&ccedil;o necess&aacute;rio para armazenar esse papel. Assim, o grupo se disponibilizou a realizar, pelo menos, um projeto inicial para esse prontu&aacute;rio odontol&oacute;gico eletr&ocirc;nico a fim de oferecer essa facilita&ccedil;&atilde;o ao curso de odontologia do Centro Universit&aacute;rio Est&aacute;cio de Bras&iacute;lia.</p>",
      },
      {
        key: "1.3",
        title: "Justificativa",
        text: "<p>O projeto em quest&atilde;o corrobora com o aprendizado do paradigma de Orienta&ccedil;&atilde;o a Objeto &nbsp;uma vez que tal paradigma pode ser facilmente aplicado durante o desenvolvimento da aplica&ccedil;&atilde;o, afinal o projeto de prontu&aacute;rio eletr&ocirc;nico exige habilidades fundamentais para o desenvolvimento da programa&ccedil;&atilde;o orientada a objeto como a abstra&ccedil;&atilde;o. Al&eacute;m disso, tal projeto tamb&eacute;m corrobora para a pr&aacute;tica real de diversos conceitos e &aacute;reas no ramo da Tecnologia da Informa&ccedil;&atilde;o e Comunica&ccedil;&atilde;o. Por exemplo, o pensamento computacional com a modulariza&ccedil;&atilde;o do problema buscando sua simplifica&ccedil;&atilde;o, a Engenharia de Software para o devido gerenciamento das etapas de processos durante o desenvolvimento da aplica&ccedil;&atilde;o e com os usos de t&eacute;cnicas para elicita&ccedil;&atilde;o de requisitos e modelagem do sistema (com uso da Linguagem Unificada de Modelagem por exemplo). O sistema solicitado pelo cliente tamb&eacute;m inclui uma s&eacute;rie de requisitos que possibilitam ao grupo o uso de mais de uma t&eacute;cnica e tecnologia por vez, como o uso de bancos de dados, interfaces gr&aacute;ficas e servi&ccedil;os de hospedagem al&eacute;m de possibilitar o uso de conhecimentos anteriores do ramo da Ti adquiridos por cada um dos membros do grupo. Tamb&eacute;m ajuda no aprendizado da linguagem Java, trabalho em grupo, como lidar com prazos, cobran&ccedil;as e clientes. Portanto, a escolha do grupo quanto a problem&aacute;tica se justifica pois possibilita que seus integrantes adquiram conhecimento e experi&ecirc;ncias reais quanto ao desenvolvimento de sistemas ao mesmo tempo que p&otilde;em seus conhecimentos em pr&aacute;tica.</p>",
      },
      {
        key: "1.4",
        title:
          "Objetivos/resultados/efeitos a serem alcançados (em relação ao problema identificado e sob a perspectiva dos públicos envolvidos)",
        text: "<p>Dos objetivos esperados com o desenvolvimento do projeto:&nbsp;</p><ul><li>Cria&ccedil;&atilde;o de uma aplica&ccedil;&atilde;o em linguagem Java que execute com efici&ecirc;ncia o papel de prontu&aacute;rio odontol&oacute;gico&nbsp;</li><li>Um sistema de uso simples e intuitivo&nbsp;</li><li>Integra&ccedil;&atilde;o desse sistema com um banco de dados que garanta a disponibilidade, integridade e confiabilidade dos dados&nbsp;</li><li>Pretende-se ainda que o sistema possibilite v&aacute;rios acessos simult&acirc;neos e ainda acessos remotos&nbsp;</li><li>Uso de Interface gr&aacute;fica com finalidade de garantir a usabilidade do sistema &nbsp;</li><li>Pretende-se ainda que o sistema seja male&aacute;vel o suficiente para ser melhor desenvolvido posteriormente</li></ul>",
      },
      {
        key: "1.5",
        title:
          "Referencial teórico (subsídio teórico para propositura de ações da extensão)",
        text: "<ul><li>Apresenta&ccedil;&atilde;o de slide do curso de odontologia disponibilizado para o grupo&nbsp;</li><li>Conte&uacute;do digital da mat&eacute;ria de Programa&ccedil;&atilde;o Orientada a Objetos disponibilizado aos alunos da mat&eacute;ria&nbsp;</li><li>Modelo de prontu&aacute;rio odontol&oacute;gico dispon&iacute;vel na internet&nbsp;</li><li>Modelo de prontu&aacute;rio odontol&oacute;gico do Centro Universit&aacute;rio ICESP&nbsp;</li><li>v&iacute;deo-aulas sobre a linguagem java e uso do swing dispon&iacute;veis na internet&nbsp;</li><li>Conversa com o coordenador do curso de odontologia Rafael Jose Santos Rodrigues&nbsp;</li><li>Orienta&ccedil;&otilde;es do professor Almir Rog&eacute;rio de Macedo</li></ul>",
      },
    ],
  },
  {
    key: "2",
    title: "Planejamento e desenvolvimento do projeto",
    sections: [
      {
        key: "2.1",
        title: "Plano de trabalho",
        text: '<p>A discuss&atilde;o acerca do trabalho se iniciou de forma efetiva durante a semana do dia 19/09/2023. Nessa semana o grupo terminou de ser formado e os prazos do trabalho foram estabelecidos pelo professor Almir Rog&eacute;rio de Macedo em sala de aula, a partir de ent&atilde;o o grupo come&ccedil;ou a discuss&atilde;o para definir o/a cliente e o projeto. Os integrantes do grupo n&atilde;o detinham o mesmo n&iacute;vel de conhecimento acerca da linguagem Java, linguagem a qual o projeto deveria obrigatoriamente ser baseada. Na semana do dia 26/09/2023 o grupo definiu de fato qual seria o projeto a ser desenvolvido e quem seria o cliente; Alguns integrantes do grupo se reuniram na sala da coordenadora dos cursos de TI do Centro Universit&aacute;rio Est&aacute;cio, onde acabaram por decidir o projeto de prontu&aacute;rio odontol&oacute;gico eletr&ocirc;nico. Foi definida uma reuni&atilde;o na semana do dia 03/10/2023 para o levantamento de requisitos, estabelecimento de prazos e defini&ccedil;&atilde;o do objetivo do sistema. A semana anterior a reuni&atilde;o ficou definida pelo grupo como ficando reservada para estudos acerca da linguagem a ser utilizada (java) e demais informa&ccedil;&otilde;es relevantes para a constru&ccedil;&atilde;o do sistema como a poss&iacute;vel integra&ccedil;&atilde;o com banco de dados e uso de interface gr&aacute;fica.&nbsp;</p><p>O cliente Rafael Jose Santos Rodrigues, coordenador do curso de odontologia, n&atilde;o pode atender o grupo no dia 04/10/2023 e uma nova reuni&atilde;o foi marcada para a semana seguinte (dia 11/10/2023), portanto durante essa semana o grupo passou a discutir, pesquisar e planejar o trabalho. O grupo utilizou a plataforma de comunica&ccedil;&atilde;o Discord para realizar reuni&otilde;es e debater sobre o trabalho e uma pasta compartilhada no Google Drive para que todos os integrantes pudessem visualizar e modificar os arquivos do trabalho, al&eacute;m de um reposit&oacute;rio compartilhado no GitHub para que todos pudessem ajudar na implementa&ccedil;&atilde;o. Ficou decidido subdividir o grupo para facilitar as pesquisas, ficando uma parte respons&aacute;vel por modelar e pesquisar sobre a conex&atilde;o com banco de dados e a outra parte ficando respons&aacute;vel por procurar maneiras vi&aacute;veis de trabalhar com uma interface. &nbsp;</p><p>Para pensar o projeto, foi usado um slide sobre prontu&aacute;rios odontol&oacute;gicos disponibilizado pela professora Josyane Lannes. A partir desse slide foi feita a primeira modelagem do banco de dados pensando apenas no cadastro do paciente.&nbsp;</p><p><img class="WACImage SCXW131914983 BCX0" style="display: block; margin-left: auto; margin-right: auto;" src="blob:http://localhost:3000/c6b9ac81-33cd-4aaf-bf84-6c821946b526"></p><p>Para complementar o slide e dar uma vis&atilde;o geral sobre prontu&aacute;rios antes da reuni&atilde;o com o cliente, foi utilizado modelos de prontu&aacute;rios odontol&oacute;gicos da internet , que ajudaram a desenvolver esse primeiro modelo para o banco de dados. Quanto &agrave;s pesquisas relacionadas a interface gr&aacute;fica com Java, al&eacute;m de consultas a professores do Centro Universit&aacute;rio Est&aacute;cio tamb&eacute;m foram utilizados sites da internet que mostraram a possibilidade de usar frameworks para usar tecnologias de desenvolvimento web (html, css) para a constru&ccedil;&atilde;o de interfaces, ou ainda uso de bibliotecas (JavaFX e AWT) e softwares (SceneBuilder) para a constru&ccedil;&atilde;o de interfaces com a linguagem Java apenas. Portanto, durante a semana anterior &agrave; reuni&atilde;o, o grupo se concentrou em continuar as pesquisas e procurar entender mais sobre do que se tratava o prontu&aacute;rio.</p>',
      },
      {
        key: "2.2",
        title:
          "Descrição da forma de envolvimento do público participante na formulação do projeto, seu desenvolvimento e avaliação, bem como as estratégias utilizadas pelo grupo para mobilizá-los.",
        text: "<p>Na busca por um cliente, ainda no in&iacute;cio do projeto, o grupo se reuniu na sala da professora Josyane Lannes onde foram direcionados para um projeto relacionado ao curso de odontologia, o desenvolvimento de um prontu&aacute;rio eletr&ocirc;nico que seria usado a partir do ano de 2024. Assim o grupo foi direcionado ao coordenador do curso de odontologia Rafael Jose Santos Rodrigues, ficou definido tamb&eacute;m que as intera&ccedil;&otilde;es do grupo com o cliente aconteceriam por reuni&otilde;es nas semanas seguintes, preferencialmente &agrave;s quartas-feiras pela tarde.</p>",
      },
      {
        key: "2.3",
        title: "Grupo de trabalho",
        text: "<p>Inicialmente, no per&iacute;odo pr&eacute;-reuni&atilde;o, o grupo ficou dividido da seguinte maneira:&nbsp;</p><ul><li>Breno Esser: pesquisa, slide para apresenta&ccedil;&atilde;o e trabalho escrito&nbsp;</li><li>Davi Mar&ccedil;al: pesquisa sobre uso de interface gr&aacute;fica e trabalho escrito&nbsp;</li><li>Gustavo &Ecirc;rades: pesquisa, modelagem do banco de dados, implementa&ccedil;&atilde;o e trabalho escrito&nbsp;</li><li>Samantha Santos: slide para apresenta&ccedil;&atilde;o e trabalho escrito&nbsp;</li></ul>",
      },
      {
        key: "2.4",
        title: "Metas, critérios ou indicadores de avaliação do projeto",
        text: "<p>Para validar que os objetivos pretendidos pelo grupo foram alcan&ccedil;ados e comprovar a satisfa&ccedil;&atilde;o do cliente &eacute; necess&aacute;rio que o &nbsp;projeto apresente, no momento de entrega, uma interface gr&aacute;fica simples, did&aacute;tica e funcional, um banco de dados confi&aacute;vel e compat&iacute;vel com os requisitos do cliente. &Eacute; necess&aacute;rio ainda que o acesso ao sistema possa ser feito de maneira r&aacute;pida e f&aacute;cil, bem como o acesso aos dados registrados no banco de dados e que, se poss&iacute;vel, esse acesso possa ser feito de maneira remota.&nbsp;</p>",
      },
      {
        key: "2.5",
        title: "Recursos previstos",
        text: "<p>Os recursos previstos para o desenvolvimento do projeto incluem:&nbsp;</p><ul><li>Uso dos laborat&oacute;rios da institui&ccedil;&atilde;o para encontro do grupo e desenvolvimento do trabalho&nbsp;</li><li>Reuni&otilde;es com o cliente sempre que necess&aacute;rio (a depender da disponibilidade do cliente e dos membros do grupo)&nbsp;</li><li>Uso de softwares para desenvolvimento da implementa&ccedil;&atilde;o, modelagem do sistema e prototipagem (caso necess&aacute;rio)&nbsp;</li><li>Uso de alguma ferramenta para hospedagem (caso o sistema n&atilde;o possa permanecer de forma local)&nbsp;</li></ul>",
      },
      {
        key: "2.6",
        title: "Detalhamento técnico do projeto",
        text: '<p>A fase de implementa&ccedil;&atilde;o foi executada de maneira relativamente lenta devido &agrave; alguns fatores: nem todos os integrantes do grupo detiam de tempo h&aacute;bil para a realiza&ccedil;&atilde;o do projeto, a linguagem de programa&ccedil;&atilde;o Java n&atilde;o era de conhecimento de nenhum dos integrantes e o projeto de prontu&aacute;rio odontol&oacute;gico era um projeto complexo e grande que apresentava algumas barreiras para o grupo como mais reuni&otilde;es com o cliente (que n&atilde;o eram poss&iacute;veis por quest&otilde;es de agenda dos integrantes do grupo e do cliente ), hospedagem do banco de dados, possibilidade de m&uacute;ltiplos acessos e acesso por diferentes dispositivos. Tais quest&otilde;es foram impeditivos para o desenvolvimento do projeto como esperado, mas n&atilde;o impediram seu desenvolvimento. Com o tempo o planejamento do projeto teve que ser adaptado levando em considera&ccedil;&atilde;o todos os impeditivos anteriormente apresentados ficando decidido entregar at&eacute; o dia 21/11/2023 um m&iacute;nimo produto vi&aacute;vel, algo funcional e que possua, no m&iacute;nimo, os requisitos mais essenciais para a aplica&ccedil;&atilde;o poder ser utilizada.&nbsp;</p><p>Usando o Discord como ferramenta para reuni&otilde;es e um grupo de Whatsapp para conversas e discuss&otilde;es acerca do trabalho, alguns membros se reuniram e conversaram redefinindo o planejamento do trabalho. Ficou definido que inicialmente seriam feitas a parte de cadastro dos dados do paciente e de suas informa&ccedil;&otilde;es, tomando como base o modelo de prontu&aacute;rio odontol&oacute;gico do Centro Universit&aacute;rio ICESP disponibilizado ao grupo pelo cliente, Rafael Rodrigues. Para facilitar o acesso de todos os membros ao c&oacute;digo da aplica&ccedil;&atilde;o bem como estimular a participa&ccedil;&atilde;o de todos os integrantes e ajudar no versionamento do c&oacute;digo, um reposit&oacute;rio no GitHub foi utilizado.&nbsp;</p><p>O desenvolvimento da primeira vers&atilde;o esclareceu melhor o grupo sobre como funcionava o swing do java para cria&ccedil;&atilde;o de interfaces gr&aacute;ficas, como os arquivos deveriam ser criados e ficar dispostos e como funcionaria a integra&ccedil;&atilde;o com banco de dados. A primeira vers&atilde;o j&aacute; possu&iacute;a campos integrados com banco de dados e j&aacute; fazia o cadastro dos dados do paciente, por&eacute;m n&atilde;o havia navega&ccedil;&atilde;o entre telas e os campos n&atilde;o estavam dispostos de maneira satisfat&oacute;ria. Foram feitos diversos testes nessa primeira vers&atilde;o e ela acabou sendo descontinuada pois os diversos bugs decorrentes desses testes tornaram essa vers&atilde;o complexa e confusa, portanto iniciar um novo reposit&oacute;rio do zero, aproveitando o que j&aacute; havia tido &ecirc;xito, pareceu ser a melhor alternativa. Com esse novo reposit&oacute;rio o grupo seguiu o desenvolvimento chegando a concluir com &ecirc;xito o cadastro dos dados do paciente, cadastro de informa&ccedil;&otilde;es pessoais, cadastro de respostas de um question&aacute;rio de sa&uacute;de geral, cadastro de um question&aacute;rio odontol&oacute;gico, navega&ccedil;&atilde;o entre telas, visualiza&ccedil;&atilde;o de dados cadastrados no banco de dados, pesquisa nos dados registrados no banco de dados e exibi&ccedil;&atilde;o de mensagens de erro. &nbsp;</p><p>O projeto possui seis tipos diferentes de arquivo:&nbsp;</p><ul><li>Um arquivo com a classe de conex&atilde;o com o banco de dados&nbsp;</li><li>Um arquivo contendo a classe main que chama a interface gr&aacute;fica&nbsp;</li><li>Um arquivo para a interface gr&aacute;fica que cont&eacute;m todas as abas e campos&nbsp;</li><li>Arquivos de acesso aos dados do banco de dados (arquivos DAO)&nbsp;</li><li>Arquivos para fun&ccedil;&otilde;es da tela, como verificar campos e mostrar mensagens de erro&nbsp;</li><li>Arquivos com as classes de entidades do banco de dados, onde cada atributo &eacute; uma coluna da tabela no banco de dados&nbsp;</li></ul><p>A classe de conex&atilde;o &eacute; chamada sempre que alguma query SQL precisa ser executada, essa classe tamb&eacute;m mostra uma mensagem de erro no console com o texto &ldquo;Driver de banco de dados n&atilde;o localizado&rdquo;. O arquivo que cont&eacute;m a classe principal chama a classe da interface gr&aacute;fica iniciando a execu&ccedil;&atilde;o do programa. O arquivo com a classe de interface gr&aacute;fica possui todas as abas e eventos em bot&otilde;es e clicks de mouse que cada aba possui. Al&eacute;m disso, essa classe tamb&eacute;m usa os m&eacute;todos getters dos objetos da tela para enviar os valores digitados pelo usu&aacute;rio para alguma classe que trabalhe com esses dados e, nessa vers&atilde;o, &nbsp;tamb&eacute;m possu&iacute;a fun&ccedil;&otilde;es para executar queries sql para listar dados ao usu&aacute;rio. Os arquivos para acesso &agrave; dados do banco de dados, s&atilde;o os arquivos com as classes que fazem o acesso real ao banco de dados ao chamar a classe de conex&atilde;o, nessas classes s&atilde;o executadas efetivamente as queries SQL de inser&ccedil;&atilde;o e futuramente, como definido no planejamento feito para o desenvolvimento do projeto, essas classes tamb&eacute;m devem conter as queries de sele&ccedil;&atilde;o, edi&ccedil;&atilde;o e dele&ccedil;&atilde;o que por quest&atilde;o de comodidade, nessa vers&atilde;o, ficaram na classe reservada para a interface gr&aacute;fica. As classes para fun&ccedil;&otilde;es na tela s&atilde;o as classes que recebem os dados vindos da classe de interface gr&aacute;fica e chamam as classes para acesso &agrave; banco de dados, onde efetivamente as queries s&atilde;o executadas. As classes de entidades s&atilde;o classes que representam as tabelas SQL e elas possuem os m&eacute;todos getters e setters para os atributos (colunas das tabelas).&nbsp;</p><p>A implementa&ccedil;&atilde;o seguiu at&eacute; o dia 20/11/2023 com a finaliza&ccedil;&atilde;o das tr&ecirc;s primeiras abas, sendo elas:&nbsp;</p><ul><li>Aba prontu&aacute;rios:&nbsp;<ul><li>Tem como objetivo mostrar os dados do paciente e dos formul&aacute;rios preenchidos, al&eacute;m disso tamb&eacute;m exibe a uma tela com o Termo de Consentimento que deve ser baixado e assinado pelo paciente.&nbsp;</li></ul></li><li>Aba novo paciente:&nbsp;<ul><li>Tem como objetivo permitir o registro do paciente e tamb&eacute;m o preenchimento de algumas informa&ccedil;&otilde;es gerais.&nbsp;</li></ul></li><li>Aba novo prontu&aacute;rio:&nbsp;<ul><li>Tem como objetivo permitir o preenchimento de um formul&aacute;rio de sa&uacute;de geral e um formul&aacute;rio referente &agrave; sa&uacute;de odontol&oacute;gica.&nbsp;</li></ul></li></ul><p>O projeto seguiu o seguinte caso de uso para basear a cria&ccedil;&atilde;o das classes e toda a implementa&ccedil;&atilde;o:&nbsp;</p><p><img class="WACImage SCXW184780599 BCX0" style="display: block; margin-left: auto; margin-right: auto;" src="blob:http://localhost:3000/c43d81f4-12b3.409a-91dd-09946b3dc184"></p><p>Esse diagrama de casos de uso foi criado com base na ideia de permitir total autonomia ao usu&aacute;rio(dentista). J&aacute; que n&atilde;o haveria login e o sistema poderia ser acessado por todos os alunos do curso de odontologia, a aplica&ccedil;&atilde;o deveria dar total autonomia para os alunos e permitir o acesso total aos recursos da aplica&ccedil;&atilde;o. Dessa forma tamb&eacute;m tornou-se necess&aacute;rio que o sistema fosse o mais simples e did&aacute;tico poss&iacute;vel, diminuindo a ocorr&ecirc;ncia de erros, facilitando a padroniza&ccedil;&atilde;o nas tarefas e diminuindo a necessidade de treinamento para uso efetivo do sistema.&nbsp;</p><p><strong>2.6.1 ESPECIFICA&Ccedil;&Atilde;O T&Eacute;CNICA DA ESTRUTURA DE ARQUIVOS &nbsp;</strong></p><p>A aplica&ccedil;&atilde;o possui seis tipos de arquivos, sendo eles: arquivo que chama a tela principal, arquivo de conex&atilde;o com o banco de dados, arquivos para acesso ao banco de dados, arquivos de entidades, arquivos de fun&ccedil;&otilde;es das telas e arquivos de telas. Cada tipo de arquivo possui uma fun&ccedil;&atilde;o espec&iacute;fica na aplica&ccedil;&atilde;o e foi criado para facilitar o processo de implementa&ccedil;&atilde;o.&nbsp;</p><p>O arquivo &ldquo;Prontuario.java&rdquo; &nbsp;&eacute; uma classe que serve apenas para chamar a tela principal, essa tela principal possui a navega&ccedil;&atilde;o entre as abas e permite a intera&ccedil;&atilde;o da interface e do usu&aacute;rio, portanto &eacute; o primeiro arquivo a ser executado; j&aacute; o arquivo de conex&atilde;o cont&eacute;m a classe que permite a conex&atilde;o com o banco de dados MySQL, portanto todas as vezes que alguma query precisar ser executada ser&aacute; necess&aacute;rio instanciar um objeto dessa classe e chamar o m&eacute;todo de conex&atilde;o.&nbsp;</p><p>Os arquivos para acesso ao banco de dados s&atilde;o no total cinco, um para cada tabela no banco de dados. Esses arquivos s&atilde;o identificados com o final &ldquo;Dao&rdquo; (Data Access Object), esses arquivos possuem uma inst&acirc;ncia da classe entidade respectiva ao Dao; por exemplo, a classe &ldquo;PacienteDao.java&rdquo; instancia um objeto da classe &ldquo;Paciente.java&rdquo; e se refere a tabela &ldquo;paciente&rdquo; do banco de dados. Esses arquivos servem para fazer a inser&ccedil;&atilde;o no banco de dados ao executar as queries SQL, chamando o m&eacute;todo de conex&atilde;o da classe de conex&atilde;o.&nbsp;</p><p>Os arquivos de entidades tamb&eacute;m s&atilde;o cinco no total e eles cont&eacute;m os m&eacute;todos getters e setters que ser&atilde;o usados durante todo o programa, por exemplo os arquivos do tipo Dao que inserem no banco de dados os valores retornados pelos m&eacute;todos getters das respectivas classes. Cada classe/arquivo se refere a uma tabela no banco de dados, cada atributo (com seus m&eacute;todos getters e setters) se refere &agrave; uma coluna da referida tabela.&nbsp;</p><p>Os arquivos de fun&ccedil;&otilde;es da tela s&atilde;o classes intermedi&aacute;rias entre as interfaces gr&aacute;ficas (arquivos de telas) e as classes Dao e, algumas vezes, tamb&eacute;m instanciam objetos das classes de entidades. Esses arquivos foram criados para facilitar a implementa&ccedil;&atilde;o de m&eacute;todos que precisassem de par&acirc;metros provindos da interface gr&aacute;fica. S&atilde;o essas classes que chamam as classes Dao, elas recebem os dados inseridos nos campos das telas e usam os m&eacute;todos setters (das classes de entidades) para alocar esses dados que posteriormente ser&atilde;o recuperados pelos arquivos Dao e inseridos nas suas respectivas tabelas. H&aacute; uma classe de fun&ccedil;&otilde;es da tela para cada tabela, mas al&eacute;m disso tamb&eacute;m h&aacute; duas classes referentes aos termos de consentimento. Essas classes s&atilde;o respons&aacute;veis por conter os m&eacute;todos de cria&ccedil;&atilde;o e leitura desses termos e tamb&eacute;m por preencher os campos de nome, CPF e RG com dados recuperados da tabela &nbsp;de pesquisa presente na tela &ldquo;Prontu&aacute;rios&rdquo;.&nbsp;</p><p>O &uacute;ltimo tipo de arquivo s&atilde;o as classes referentes &agrave;s telas. H&aacute; tr&ecirc;s classes aqui: &nbsp;uma classe cont&eacute;m o c&oacute;digo da tela principal com a navega&ccedil;&atilde;o entre as tr&ecirc;s principais abas, algumas queries SQL de consulta e eventos de cliques em bot&otilde;es, uma outra classe que possui os dados retornados dos question&aacute;rios de sa&uacute;de e uma &uacute;ltima tela onde os termos de contrato s&atilde;o lidos.&nbsp;</p><p>A primeira classe de tela denominada &ldquo;Identifica&ccedil;&atilde;o.java&rdquo; &eacute; a alma da aplica&ccedil;&atilde;o, pois ela chama a grande maioria das classes presentes na implementa&ccedil;&atilde;o e cont&eacute;m consultas no banco de dados, eventos em bot&otilde;es, m&eacute;todos de inser&ccedil;&otilde;es em tabelas, m&eacute;todos que capturam dados, m&eacute;todos que alteram visibilidade, etc. A classe denominada &ldquo;Prontuario.java&rdquo; &eacute; a tela que ir&aacute; retornar os dados inseridos na aba &ldquo;Novo prontu&aacute;rio&rdquo;, ou seja, ela retorna os dados colocados nos campos de texto e nos checkboxes dos question&aacute;rios de sa&uacute;de geral e de sa&uacute;de odontol&oacute;gica. J&aacute; a classe &ldquo;TermosConsentimento.java&rdquo; serve apenas para a leitura do arquivo de contrato, as linhas desse contrato s&atilde;o exibidas nesta tela. Vale ressaltar que a classe &ldquo;Informacoes.java&rdquo; tamb&eacute;m presente no diret&oacute;rio de telas serviu apenas para testes e corre&ccedil;&otilde;es de &nbsp;bugs durante o processo de implementa&ccedil;&atilde;o.&nbsp;</p><p><strong>2.6.2 ESPECIFICA&Ccedil;&Atilde;O T&Eacute;CNICA DO BANCO DE DADOS&nbsp;</strong></p><p>O banco de dados sofreu algumas altera&ccedil;&otilde;es ao longo do projeto, sendo remodelado algumas vezes at&eacute; chegar na vers&atilde;o atual:&nbsp;</p><p><img class="WACImage SCXW36276851 BCX0" style="display: block; margin-left: auto; margin-right: auto;" src="blob:http://localhost:3000/25c26ae8-f6c0-4d7c-8817-05b2da636a98"></p><p>O banco foi modelado dessa maneira pois a aplica&ccedil;&atilde;o contempla apenas o cadastro dos dados pessoais do paciente e de suas informa&ccedil;&otilde;es m&eacute;dicas (informa&ccedil;&otilde;es e question&aacute;rios de sa&uacute;de). Al&eacute;m dos atributos presentes no modelo, o banco de dados possui outros atributos, sendo que cada coluna(atributo) foi baseado nos campos presentes no modelo de prontu&aacute;rio disponibilizado ao grupo pelo cliente.&nbsp;</p><p>A tabela paciente &eacute; a tabela que armazena todos os dados pessoais do paciente que forem inseridos nos campos da primeira parte da tela &ldquo;Novo paciente&rdquo;, dados como nome, CPF, RG, data de nascimento, etc. s&atilde;o armazenados nesta tabela, al&eacute;m de um campo id que &eacute; auto incrementado em ordem crescente conforme as linhas forem sendo registradas.&nbsp;</p><p>A tabela paciente_informacoes serve para registro dos dados inseridos nos campos da segunda parte da tela &ldquo;Novo paciente&rdquo;, na parte de informa&ccedil;&otilde;es. Essas informa&ccedil;&otilde;es s&atilde;o uma esp&eacute;cie de question&aacute;rio inicial realizado com o paciente e cont&eacute;m uma s&eacute;rie de dados como exame f&iacute;sico, press&atilde;o arterial, m&eacute;dica pregressa, etc. Essa tabela tamb&eacute;m possui um campo id com auto incremento, por&eacute;m o atributo id aqui &eacute; uma chave estrangeira vinda da tabela paciente.&nbsp;</p><p>As tabelas paciente_saude_geral e paciente_quest_odonto funcionam da mesma maneira. Ambas servem para armazenar os dados inseridos nos campos da tela &ldquo;Novo prontu&aacute;rio&rdquo;, a primeira armazena os dados do campo &ldquo;question&aacute;rio de sa&uacute;de geral&rdquo; e a segunda do campo &ldquo;sa&uacute;de odontol&oacute;gica&rdquo;; elas possuem uma coluna chamada &ldquo;questoes&rdquo; que armazena uma string contendo apenas 0 e 1 conforme os campos checkboxes forem sendo preenchidos, isso funciona dessa maneira devido a t&eacute;cnica &ldquo;One Hot Coding&rdquo; que foi utilizada visando diminuir a complexidade do projeto ao reduzir o n&uacute;mero de colunas nas tabelas. O restante das colunas se referem aos campos de texto que cada parte (sa&uacute;de geral e sa&uacute;de odontol&oacute;gica) cont&eacute;m. Ambas as tabelas possuem um campo id com auto incremento, por&eacute;m que &eacute; chave estrangeira da tabela paciente_informacoes.&nbsp;</p><p><strong>2.6.3 ESPECIFICA&Ccedil;&Atilde;O T&Eacute;CNICA DA ABA &ldquo;PRONTU&Aacute;RIOS&rdquo;&nbsp;</strong></p><p>Essa primeira tela consiste em executar uma s&eacute;rie de consultas no banco de dados e trabalhar com seus retornos. Inicialmente ela exibe uma tabela e um campo de pesquisa, o campo de pesquisa busca no banco de dados (na tabela referente aos dados pessoais do paciente) qualquer coisa parecida com o que o usu&aacute;rio escreveu, quando encontra retorna na tabela uma linha com os dados referentes &agrave; essa pesquisa em uma &uacute;nica linha; a tabela &eacute; preenchida de forma autom&aacute;tica conforme o cadastro dos paciente for sendo realizado e &eacute; ordenada em ordem crescente tomando como refer&ecirc;ncia o campo id.&nbsp;</p><p>Quando uma linha espec&iacute;fica na tabela &eacute; selecionada o bot&atilde;o &ldquo;visualizar&rdquo; &eacute; exibido, esse bot&atilde;o faz outra consulta no banco de dados, uma consulta mais detalhada e que envolve todas as tabelas do banco de dados, esse bot&atilde;o abre uma sess&atilde;o na primeira aba que exibe todas as informa&ccedil;&otilde;es do paciente. Dados pessoais, dados preenchidos no formul&aacute;rio de sa&uacute;de geral e no formul&aacute;rio de sa&uacute;de odontol&oacute;gica s&atilde;o exibidos de maneira formatada nessa nova sess&atilde;o que tamb&eacute;m apresenta dois outros bot&otilde;es. O bot&atilde;o &ldquo;Termo de Consentimento&rdquo;, ao ser pressionado, abre uma nova tela com o contrato de consentimento que o paciente deve assinar; na realidade o que esse bot&atilde;o faz &eacute; criar um arquivo com os termos de consentimento e preencher os campos de nome, RG e CPF com os dados retornados do banco de dados da tabela paciente (nas respectivas colunas). O bot&atilde;o &ldquo;question&aacute;rio de sa&uacute;de&rdquo; exibe uma tela que cont&eacute;m todos os dados registrados nos formul&aacute;rios preenchidos anteriormente. &nbsp;</p><p>A tabela inicial trabalha como uma consulta simples no banco de dados. Inicialmente a tabela &eacute; preenchida com o retorno de uma query SQL que busca por linhas na tabela paciente e retorna os dados encontrados nas colunas id, nome, idade, telefone e email; caso n&atilde;o haja linhas, a tabela permanece vazia. Quando algum texto &eacute; digitado no campo de pesquisa e a tecla &ldquo;enter&rdquo; ou o bot&atilde;o &ldquo;pesquisar&rdquo; s&atilde;o pressionados, uma nova consulta SQL &eacute; executada, ainda na tabela paciente, &nbsp;mas dessa vez &nbsp; usando o operador LIKE do SQL, esse operador ajuda na busca pois permite fazer a busca a partir de qualquer caractere, realizando assim uma busca por &ldquo;qualquer coisa parecida com o que foi digitado&rdquo;; o resultado dessa pesquisa &eacute; exibido em uma linha na tabela.&nbsp;</p><p>Usando o pr&oacute;prio java &eacute; poss&iacute;vel identificar as linhas que forem selecionadas pelo usu&aacute;rio, afinal cada campo possui um nome espec&iacute;fico e por ser uma tabela &eacute; poss&iacute;vel usar o m&eacute;todo &ldquo;selectedRow()&rdquo;. Com isso a linha selecionada &eacute; identificada e basta selecionar a coluna desejada para obter qualquer dado de maneira individual da tabela. &Eacute; com essa mesma l&oacute;gica que o bot&atilde;o &ldquo;visualizar&rdquo; funciona, ao ser pressionado ele executa uma nova consulta no banco de dados, mas dessa vez procurando por linhas que possuam o valor da coluna &ldquo;id&rdquo; semelhante ao valor retornado da coluna &ldquo;id&rdquo; na linha selecionada; essa consulta no banco de dados &eacute; feita nas tabelas &ldquo;paciente&rdquo; e &ldquo;paciente_informacoes&rdquo;, obtendo assim dados pessoais e dados referentes &agrave;s primeiras informa&ccedil;&otilde;es preenchidas sobre o paciente. O resultado dessa consulta &eacute; retornado, de forma formatada, na nova sess&atilde;o que s&oacute; se torna vis&iacute;vel no clique do bot&atilde;o &ldquo;visualizar&rdquo;.&nbsp;</p><p>Essa nova sess&atilde;o exibe tabelas e campos de texto com os dados retornados, mas tamb&eacute;m apresenta outros dois bot&otilde;es: o bot&atilde;o &ldquo;Termos de consentimento&rdquo; e o bot&atilde;o &ldquo;question&aacute;rio de sa&uacute;de&rdquo;. ao pressionar &ldquo;Termos de consentimento&rdquo; um m&eacute;todo &eacute; chamado, ele recebe como par&acirc;metro o valor da coluna &ldquo;id&rdquo; (coluna essa referente &agrave; linha selecionada na tabela de consulta), esse m&eacute;todo usa esse &ldquo;id&rdquo; para realizar mais uma consulta no banco de dados e obter o nome, RG e CPF de um paciente espec&iacute;fico; esses dados s&atilde;o importantes pois esse m&eacute;todo &nbsp;tem como objetivo criar um arquivo com os termos de contrato que o paciente deve preencher, esse arquivo &eacute; importante pois o paciente deve concordar e confirmar estar ciente que seus dados pessoais ser&atilde;o mantidos armazenados e que os dados coletados nos formul&aacute;rios ser&atilde;o usados durante os atendimentos e esse contrato &eacute; criado j&aacute; formatado de maneira personalizada para aquele paciente espec&iacute;fico. O arquivo &eacute; criado em formato &ldquo;.ott&rdquo;, um formato de arquivo de texto edit&aacute;vel padr&atilde;o para software livre, esse formato &eacute; usado pois permite a f&aacute;cil edi&ccedil;&atilde;o e posterior impress&atilde;o deste contrato, al&eacute;m disso uma nova tela &eacute; criada, o conte&uacute;do dessa tela prov&eacute;m de um m&eacute;todo que realiza uma leitura no arquivo com os termos de consentimento anteriormente criado. O bot&atilde;o &ldquo;question&aacute;rio de sa&uacute;de&rdquo; &nbsp;n&atilde;o trabalha de maneira diferente dos outros. Ele exibe uma nova tela com o retorno de uma consulta SQL nas tabelas &ldquo;paciente_saude_geral&rdquo; e &ldquo;paciente_quest_odonto&rdquo;, essa consulta &eacute; feita procurando pela linha que tenha a coluna &ldquo;id&rdquo; com um valor semelhante ao que foi passado como par&acirc;metro (valor da coluna &ldquo;id&rdquo; na linha selecionada na tabela de consulta).&nbsp;</p><p>Essas duas novas telas abertas ap&oacute;s um bot&atilde;o ser pressionado s&atilde;o duas classes com m&eacute;todos que executam a query e inserem o retorno dela nos lugares especificados, foi codificado dessa maneira apenas por quest&atilde;o de comodidade e para tentar facilitar a leitura do c&oacute;digo, pois caso contr&aacute;rio o c&oacute;digo ficaria muito polu&iacute;do. Justamente por serem duas classes diferentes da classe que cont&eacute;m a tabela de pesquisa, os valores referentes &agrave; linha selecionada n&atilde;o s&atilde;o vis&iacute;veis para elas, portanto foi necess&aacute;rio passar como par&acirc;metro o valor que era preciso (nesse caso o id do paciente) na chamada do m&eacute;todo quando o objeto dessas classes fosse instanciado. Os m&eacute;todos que realizam as consultas e as inser&ccedil;&otilde;es nos campos determinados est&atilde;o todos (com exce&ccedil;&atilde;o dos m&eacute;todos de pesquisa referentes &agrave;s duas novas telas) na mesma classe, foi codificado dessa maneira tamb&eacute;m por quest&atilde;o de comodidade.&nbsp;</p><p><strong>2.6.4 ESPECIFICA&Ccedil;&Atilde;O T&Eacute;CNICA DA ABA &ldquo;NOVO PACIENTE&rdquo;&nbsp;</strong></p><p>Essa aba tem o objetivo de realizar o registro dos dados pessoais do paciente e tamb&eacute;m de algumas informa&ccedil;&otilde;es iniciais. Os campos que necessitam de formata&ccedil;&atilde;o como RG,CPF,telefone j&aacute; possuem uma formata&ccedil;&atilde;o pr&eacute; definida para garantir a padroniza&ccedil;&atilde;o nos dados e evitar que o usu&aacute;rio precise gastar tempo digitando caracteres especiais como par&ecirc;nteses e pontos; al&eacute;m disso, essa aba tamb&eacute;m exige mensagens para informar o &ecirc;xito ou o erro no cadastro dos dados no banco de dados.&nbsp;</p><p>Essa tela trabalha chamando um m&eacute;todo que tem como fun&ccedil;&atilde;o capturar os dados inseridos pelo usu&aacute;rio nos campos espec&iacute;ficos do formul&aacute;rio, esse m&eacute;todo captura esses dados e, usando os m&eacute;todos setters insere esses dados nos atributos especificados, ap&oacute;s isso apenas chama o m&eacute;todo Dao para realizar a inser&ccedil;&atilde;o de forma efetiva no banco de dados. Como cada atributo se refere a uma coluna em uma tabela espec&iacute;fica, o m&eacute;todo do Dao(para acesso ao banco de dados) apenas usa os m&eacute;todos getters para capturar os dados e insere eles na sua coluna espec&iacute;fica a partir de uma query SQL. No fim, uma mensagem &eacute; exibida ao usu&aacute;rio com o status da opera&ccedil;&atilde;o, sendo ela bem sucedida ou n&atilde;o.&nbsp;</p><p><strong>2.6.4 ESPECIFICA&Ccedil;&Atilde;O T&Eacute;CNICA DA ABA &ldquo;NOVO PRONTU&Aacute;RIO&rdquo;&nbsp;</strong></p><p>Essa tela apresenta dois question&aacute;rios referentes &agrave; sa&uacute;de do paciente, sendo um de sa&uacute;de geral com perguntas mais gerais, isto &eacute;, n&atilde;o apenas relacionadas a odontologia e um exclusivamente odontol&oacute;gico. Ambos os formul&aacute;rios possuem dois campos, um com checkboxes e outro com campos de texto. As quest&otilde;es com campos de texto s&atilde;o quest&otilde;es que exigem maior elabora&ccedil;&atilde;o e n&atilde;o podem ser respondidas com apenas &ldquo;sim e n&atilde;o&rdquo;. Essa tela exibe mensagens conforme os bot&otilde;es &ldquo;confirmar&rdquo; e &ldquo;cancelar&rdquo; forem pressionados; ap&oacute;s o preenchimento dos campos, ao pressionar o bot&atilde;o &ldquo;confirmar&rdquo;, os dados ser&atilde;o inseridos no banco de dados e mensagens de sucesso ou erro ser&atilde;o exibidas &nbsp;conforme o resultado da opera&ccedil;&atilde;o de inser&ccedil;&atilde;o. Ao pressionar o bot&atilde;o &ldquo;cancelar&rdquo; todos os campos ficam automaticamente vazios e a opera&ccedil;&atilde;o &eacute; cancelada, uma mensagem tamb&eacute;m &eacute; exibida para o usu&aacute;rio indicando isso.&nbsp;</p><p>Essa tela trabalha chamando dois m&eacute;todos que capturam os dados informados pelo usu&aacute;rio nos campos de textos e tamb&eacute;m captura os checkboxes que forem selecionados, esse m&eacute;todo instancia um objeto Dao (para acesso aos dados do banco de dados) para cada question&aacute;rio (um para o question&aacute;rio de sa&uacute;de geral e outro para o question&aacute;rio odontol&oacute;gico) que realiza a query SQL de inser&ccedil;&atilde;o nas tabelas &ldquo;paciente_saude_geral&rdquo; e &ldquo;paciente_quest_odonto&rdquo; e retorna se houve sucesso ou n&atilde;o. Uma mensagem &eacute; exibida na tela com esse retorno, seja sucesso ou falha na opera&ccedil;&atilde;o no banco de dados. H&aacute; uma coluna para cada campo de texto presente nos question&aacute;rios, mas para os checkboxes h&aacute; apenas 1 coluna para a tabela &ldquo;paciente_saude_geral&rdquo; e para a tabela &ldquo;paciente_quest_odonto&rdquo;, essa &uacute;nica coluna funciona baseada na ideia do One Hot Coding.&nbsp;</p><p>Como h&aacute; v&aacute;rios checkboxes e cada um &eacute; relacionado a uma pergunta espec&iacute;fica, seu armazenamento no banco de dados foi um &ldquo;problema&rdquo;, mas um problema de f&aacute;cil resolu&ccedil;&atilde;o. N&atilde;o era vi&aacute;vel criar N tabelas no banco de dados, onde N &eacute; a quantidade de checkboxes presentes nos formul&aacute;rios ent&atilde;o, por quest&otilde;es de otimiza&ccedil;&atilde;o da aplica&ccedil;&atilde;o, fomos orientados pelo professor Almir Rog&eacute;rio de Macedo a buscar pelo &ldquo;One Hot Coding&rdquo;, essa ideia foi de grande ajuda pois resolveu esse &ldquo;problema&rdquo; simplificando a estrutura do banco de dados e sua posterior consulta. Assim, baseado no One Hot Coding, uma String de tamanho fixo &eacute; armazenada no banco de dados em uma coluna chamada &ldquo;questoes&rdquo; (essa coluna existe na tabela &ldquo;paciente_saude_geral&rdquo; e na tabela &ldquo;paciente_quest_odonto&rdquo;), essa String cont&eacute;m apenas os valores 0 ou 1; quando &eacute; necess&aacute;rio saber quais checkboxes foram marcados durante a realiza&ccedil;&atilde;o dos question&aacute;rios de sa&uacute;de, essa String &eacute; convertida em um Array de N posi&ccedil;&otilde;es, onde N &eacute; a quantidade de caracteres da String (essa quantidade &eacute; sempre fixa e igual a quantidade de checkboxes presentes em cada question&aacute;rio). Dessa forma, basta passear pelas posi&ccedil;&otilde;es no array e quando uma posi&ccedil;&atilde;o conter o valor 1 significa que o checkbox naquela posi&ccedil;&atilde;o foi marcado. &nbsp;</p><p><strong>2.6.5 ESPECIFICA&Ccedil;&Atilde;O T&Eacute;CNICA DAS MENSAGENS EXIBIDAS&nbsp;</strong></p><p>Sempre que &eacute; necess&aacute;rio trabalhar com o banco de dados executando queries SQL, as cl&aacute;usulas Try e Catch do Java s&atilde;o usadas para poder capturar os erros que ocorrem durante a execu&ccedil;&atilde;o das opera&ccedil;&otilde;es no banco de dados. Isso foi feito &nbsp;por dois motivos: facilitar o desenvolvimento da aplica&ccedil;&atilde;o e garantir a exibi&ccedil;&atilde;o correta de mensagens ao usu&aacute;rio.&nbsp;</p><p>Usar essa estrutura ajudou a descobrir os eventuais erros e corrigir bugs que ocorriam durante a execu&ccedil;&atilde;o do programa, al&eacute;m de facilitar na exibi&ccedil;&atilde;o de mensagens, pois caso o programa entre no bloco Catch significa que algum erro ocorreu, dessa maneira usando a biblioteca JOptionPane do Java uma mensagem de erro do tipo ERROR_MESSAGE &eacute; exibida, contendo em seu conte&uacute;do a exce&ccedil;&atilde;o da cl&aacute;usula Catch; caso contr&aacute;rio uma mensagem de sucesso &eacute; exibida confirmando para o usu&aacute;rio o &ecirc;xito na opera&ccedil;&atilde;o. &nbsp;</p>',
      },
    ],
  },
  {
    key: "3",
    title: "Encerramento do Projeto",
    sections: [
      {
        key: "3.1",
        title:
          "Relatório Coletivo (podendo ser oral e escrita ou apenas escrita)",
        text: "<p>Durante o desenvolvimento do projeto enfrentamos algumas dificuldades que impediram o desenvolvimento da aplica&ccedil;&atilde;o da maneira que era esperada e frente a essas dificuldades tivemos que ir adaptando o trabalho. No entanto, conseguimos desenvolver um m&iacute;nimo produto vi&aacute;vel, algo que funciona, n&atilde;o da melhor maneira ou da forma como gostar&iacute;amos, mas funciona e cumpre seu prop&oacute;sito. Dentre os requisitos, pudemos atender apenas alguns e conclu&iacute;mos pouco mais da metade do que deveria ser feito, mas o projeto, assim como foi acordado com o cliente, &eacute; uma primeira vers&atilde;o mais simples do que pode vir a ser e portanto podemos dizer que o trabalho foi devidamente conclu&iacute;do. O projeto abre a possibilidade de refatora&ccedil;&atilde;o e evolu&ccedil;&atilde;o, ent&atilde;o mesmo que improv&aacute;vel seu posterior desenvolvimento, ele &eacute; poss&iacute;vel.&nbsp;</p>",
      },
      {
        key: "3.2",
        title: "Avaliação de reação da parte interessada",
        text: '<p>Buscamos contato com o coordenador do curso de odontologia, Rafael Jose Santos Rodrigues por whatsapp e presencialmente, mas n&atilde;o conseguimos resposta. No dia 17/11/2023 tentamos contato por whatsapp, mas n&atilde;o tivemos resposta e ficou decidido que o grupo se reuniria na segunda-feira para tentar algum atendimento presencial com o cliente. No dia 20/11/2023, o grupo se reuniu no Centro Universit&aacute;rio Est&aacute;cio, mas n&atilde;o foi poss&iacute;vel se encontrar com o cliente pois ele n&atilde;o se encontrava na institui&ccedil;&atilde;o e o grupo n&atilde;o possu&iacute;a outra maneira de contato.&nbsp;</p><p><img class="WACImage SCXW141770361 BCX0" style="display: block; margin-left: auto; margin-right: auto;" src="blob:http://localhost:3000/d73966c6-245a-43ec-bc9b-1d0c133db8ed"></p>',
      },
      {
        key: "3.3",
        title: "Relato de Experiência Individual",
        text: '<p><span style="background-color: rgb(241, 196, 15);">Gustavo &Ecirc;rades Vilarinho Silva:</span> Fiquei respons&aacute;vel pela implementa&ccedil;&atilde;o, pesquisa e confec&ccedil;&atilde;o do trabalho escrito. Durante o trabalho tive a oportunidade de aplicar conceitos dos quais eu s&oacute; conhecia a teoria, como a orienta&ccedil;&atilde;o a objeto, e tamb&eacute;m pude aplicar o que foi visto em sala de aula, afinal o projeto avan&ccedil;ava quase ao mesmo tempo que o conte&uacute;do das aulas. Conhecia o Java apenas por nome, nunca tinha chegado a mexer efetivamente com ele e nesse projeto tive a oportunidade de trabalhar bastante com essa linguagem, pois fiquei respons&aacute;vel por toda a implementa&ccedil;&atilde;o, desde o banco de dados at&eacute; a interface gr&aacute;fica. Durante esse projeto, al&eacute;m de entender melhor o Java e poder mexer com ele, pude compreender bem mais a import&acirc;ncia de um bom levantamento de requisitos e conversa com o cliente. Parte do atraso na confec&ccedil;&atilde;o do trabalho se deu justamente pela falta de entendimento das necessidades do cliente e posteriormente pela falta de contato com esse cliente. Houve uma s&eacute;rie de problemas durante o desenvolvimento da aplica&ccedil;&atilde;o e o trabalho chegou at&eacute; mesmo a ser reiniciado, al&eacute;m disso eu n&atilde;o detinha de tanto tempo quanto gostaria para poder focar no desenvolvimento desse projeto, mas mesmo com todos esses empecilhos creio que conseguimos entregar um m&iacute;nimo produto vi&aacute;vel; infelizmente n&atilde;o foi poss&iacute;vel fazer tudo que gostaria ou o que o grupo se prop&ocirc;s a fazer, mas conseguimos concluir pelo menos um produto base que pode ser refatorado e melhorado futuramente. Embora tenha sido interessante mexer com uma linguagem nova e poder trabalhar em um projeto real, o projeto foi bastante cansativo e n&atilde;o tenho certeza se continuaria seu desenvolvimento. Apesar disso, achei interessante a experi&ecirc;ncia e gostei de realizar esse projeto. &nbsp;</p><p><span style="background-color: rgb(241, 196, 15);">Davi Mar&ccedil;al Silva Ara&uacute;jo:</span> Fiquei respons&aacute;vel pela pesquisa e por parte da confec&ccedil;&atilde;o do projeto. Durante o per&iacute;odo de desenvolvimento do projeto pude aprender de forma exponencial sobre as teorias de programa&ccedil;&atilde;o, e desenvolvimento, n&atilde;o tenho muita experi&ecirc;ncia com programa&ccedil;&atilde;o pois estou no segundo semestre, mas aprendi muita coisa que n&atilde;o tinha conhecimento. Sobre programa&ccedil;&atilde;o orientada a objeto, foi a primeira experi&ecirc;ncia, tanto em desenvolvimento, tanto com programa&ccedil;&atilde;o em geral, apesar de algumas complica&ccedil;&otilde;es na confec&ccedil;&atilde;o do projeto como um todo, eu achei que foi uma experi&ecirc;ncia muito interessante de aprendizado.&nbsp;</p><p><span style="background-color: rgb(241, 196, 15);">Breno Esser:</span> Fiquei respons&aacute;vel pela cria&ccedil;&atilde;o de objetos para a interface do programa e parte da documenta&ccedil;&atilde;o do projeto. O contato direto com o cliente me ajudou a compreender melhor a intera&ccedil;&atilde;o entre os provedores e consumidores deste tipo de servi&ccedil;o, que certamente ser&atilde;o &uacute;teis em minha futura carreira. Tamb&eacute;m foi meu primeiro contato com a linguagem Java, me provendo uma introdu&ccedil;&atilde;o pr&aacute;tica &agrave; mesma como futura ferramenta. Devido a mudan&ccedil;as na composi&ccedil;&atilde;o de nosso grupo durante o desenvolvimento e dificuldades em contatar nosso cliente, partes do c&oacute;digo precisaram ser editadas e replanejadas, atrasando o avan&ccedil;o do projeto significativamente. Apesar das complica&ccedil;&otilde;es, sinto que consegui absorver conhecimentos essenciais sobre o planejamento de futuros projetos, assim como sobre aplica&ccedil;&otilde;es reais do conte&uacute;do demonstrado em sala de aula, me sentindo mais preparado para aprender e utilizar minhas habilidades para melhor atender as necessidades de meus clientes no futuro.&nbsp;</p><p><span style="background-color: rgb(241, 196, 15);">Samantha Santos Duarte:</span> Fiquei respons&aacute;vel pelo slide e pela parte escrita do trabalho, durante esse processo do trabalho era uma mat&eacute;ria que eu j&aacute; tinha ouvido falar e feito uma pequena pesquisa antes durante a mat&eacute;ria ela sempre foi um conceito mais dif&iacute;cil de eu compreender, nesse projeto mesmo que eu tentasse ajudar na hora de fazer eu acabava me perdendo ou meus c&oacute;digos n&atilde;o combinavam e na metade do trabalho eu comecei a compreender mais ent&atilde;o eu fiquei principalmente respons&aacute;vel pelo slide e pela parte escrita do trabalho foi uma experi&ecirc;ncia realmente boa mas muito cansativa, gostei de ver a confec&ccedil;&atilde;o desse trabalho crescendo mesmo que n&atilde;o estivesse totalmente completo e acho que eu n&atilde;o prosseguiria com esse projeto pois acabou dando mais do que planejado. Mas mesmo sendo cansativo a experi&ecirc;ncia foi muito boa aprendi coisas que eu n&atilde;o achei que eu ia conseguir compreender porque eu j&aacute; tinha desistido de mim mesmo e esse projeto foi realmente bom mesmo eu n&atilde;o tendo sido de t&atilde;o grande ajuda.&nbsp;</p>',
      },
    ],
  },
  {
    key: "4",
    title: "Ferramentas utilizadas no desenvolvimento",
    text: "<ol><li>java 17.0.8&nbsp;</li><li>Apache NetBeans IDE 17&nbsp;</li><li>Java Swing &nbsp;</li><li>Mysql Workbench&nbsp;</li><li>BrModelo 3.0&nbsp;</li><li>Draw.io&nbsp;</li><li>GitHub&nbsp;</li><li>LibreOffice Writer&nbsp;</li><li>Google Docs&nbsp;</li><li>Pasta compartilhada no Google Drive&nbsp;</li><li>Plataforma de comunica&ccedil;&atilde;o online Discord&nbsp;</li><li>Grupo com os integrantes do projeto &nbsp;no Whatsapp&nbsp;</li></ol>",
  },
  {
    key: "5",
    title: "Base Teórica",
    text: "<ol><li>Aulas da mat&eacute;ria de Programa&ccedil;&atilde;o Orientada a Objetos em Java &nbsp;</li><li>Consultas ao professor &nbsp;Almir Rog&eacute;rio de Macedo &nbsp;</li><li>V&iacute;deo-aulas referentes a utiliza&ccedil;&atilde;o do Java Swing no YouTube&nbsp;</li><li>V&iacute;deo-aulas referentes a conex&atilde;o com banco de dados em aplica&ccedil;&otilde;es Java no YouTube&nbsp;</li><li>V&iacute;deo-aulas referentes a manipula&ccedil;&atilde;o de arquivos na linguagem &nbsp;Java no Youtube&nbsp;</li><li>Site StackOverflow &nbsp;</li><li>ChatGPT vers&atilde;o 3.5&nbsp;</li><li>Site DevMedia&nbsp;</li><li>Site Alura&nbsp;</li></ol>",
  },
];

export default function Page() {
  const [sections, setSections] = useState<Section[]>(nodes);
  const [docName, setDocName] = useState<string>("");

  const handleFinish = () => {
    const doc = {
      name: docName,
      sections,
    };
    console.log(doc);
  };

  // const addSection = () => {
  //   setSections((prev) => [...prev, { title: "Nova Seção", sections: [] }]);
  // };

  return (
    <div className="grid">
      <div className="col-12">
        <div className="card p-fluid">
          <h5>Adicionar Trabalho</h5>
          <div className="field">
            <label htmlFor="name">Nome</label>
            <InputText
              id="name"
              type="text"
              value={docName}
              onChange={(e) => setDocName(e.target.value)}
            />
          </div>
          {sections.map((section, index) => (
            <SectionComponent
              section={section}
              key={section.key}
              id={section.key}
              setSections={setSections}
              sections={sections}
            />
          ))}

          <div className="field">
            <Button
              label="Salvar"
              icon="pi pi-save"
              className="p-button-raised p-button-rounded"
              onClick={handleFinish}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
